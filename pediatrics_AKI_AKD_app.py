import streamlit as st
import lightgbm as lgb
import numpy as np

# Load the AKD and AKI models
aki_model = lgb.Booster(model_file='pediatrics_AKI_model.txt')
akd_model = lgb.Booster(model_file='pediatrics_AKD_model.txt')

# Mapping for Urine_protein and AKIGrade values
Hypnotics_and_sedatives_mapping = {"No": 0, "Yes": 1}
PPI_mapping = {"No": 0, "Yes": 1}
AKI_Grade_mapping = {"Stage 0": 0, "Stage 1": 1, "Stage 2": 2, "Stage 3": 3}
Gender_mapping = {"Female": 0, "Male": 1}
Transfusion_mapping = {"No": 0, "Yes": 1}


def predict_aki_probability(features):
    aki_prob = aki_model.predict(features)
    return aki_prob[0]

def predict_akd_probability(features):
    akd_prob = akd_model.predict(features)
    return akd_prob[0]


def main():
    st.title('AKI and AKD Probability Prediction for Pediatrics')

# User selects which content to display
    selected_content = st.radio("", ("Model Introduction", "AKI and AKD Prediction"))

    if selected_content == "Model Introduction":
        st.subheader("Model Introduction")
        st.write("This online platform provides predictions for the probability of acute kidney injury (AKI) and acute Kidney Disease (AKD) for Pediatrics using a LightGBM machine learning model.")
        # Disclaimer
        st.subheader("Disclaimer")
        st.write("The predictions generated by this model are based on historical data and statistical patterns, and they may not be entirely accurate or applicable to every individual.")
        st.write("**For Patients:**")
        st.write("- The predictions presented by this platform are intended for informational purposes only and should not be regarded as a substitute for professional medical advice, diagnosis, or treatment.")
        st.write("- Consult with your healthcare provider for personalized medical guidance and decisions concerning your health.")
        st.write("**For Healthcare Professionals:**")
        st.write("- This platform should be considered as a supplementary tool to aid clinical decision-making and should not be the sole determinant of patient care.")
        st.write("- Clinical judgment and expertise should always take precedence in medical practice.")
        st.write("**For Researchers:**")
        st.write("- While this platform can serve as a valuable resource for research purposes, it is crucial to validate its predictions within your specific clinical context and patient population.")
        st.write("- Ensure that your research adheres to all ethical and regulatory standards.")
        st.write("The creators of this online platform and model disclaim any responsibility for decisions or actions taken based on the predictions provided herein. Please use this tool responsibly and always consider individual patient characteristics and clinical context when making medical decisions.")
        st.write("By utilizing this online platform, you agree to the terms and conditions outlined in this disclaimer.")

    elif selected_content == "AKI and AKD Prediction":
        st.subheader("AKI and AKD Prediction for Pediatrics")

    # User selects prediction type (AKD or CKD)
        prediction_type = st.radio("Select Prediction Type", ("AKI Prediction", "AKD Prediction"))

    # Feature input
        features = []

        if prediction_type == "AKI Prediction":
            st.subheader("AKI Features")
 
            Scr = st.number_input("Scr (μmol/L)", value=0.00, format="%.2f") 
            WBC = st.number_input("WBC (×10^9/L)", value=0.00, format="%.2f") 
            Neutrophil=st.number_input("Neutrophil count (×10^9/L)", value=0.00, format="%.2f") 
            LDH=st.number_input("LDH (U/L)", value=0.00, format="%.2f") 
            Hypnotics_and_sedatives=st.selectbox("Hypnosedatives", ["No", "Yes"])
            PTA=st.number_input("PTA (%)", value=0.00, format="%.2f") 
            MCHC=st.number_input("MCHC (g/L)", value=0.00, format="%.2f") 
            P=st.number_input("Phosphorus (mmol/L)", value=0.00, format="%.2f") 
            TP=st.number_input("Total protein (g/L)", value=0.00, format="%.2f") 
            RBC=st.number_input("RBC (×10^12/L)", value=0.00, format="%.2f")

        # Map AKIGrade back to 0, 1, 2, 3 for prediction
            Hypnotics_and_sedatives_encoded = Hypnotics_and_sedatives_mapping[Hypnotics_and_sedatives]

            features.extend([Scr, WBC, Neutrophil, LDH,Hypnotics_and_sedatives_encoded, PTA, MCHC, P, TP, RBC])
        else:
            st.subheader("AKD Features")

            PPI = st.selectbox("PPI", ["No", "Yes"])
            Glu = st.number_input("Blood glucose (mmol/L)", value=0.00, format="%.2f") 
            Hb = st.number_input("Hemoglobin (g/L)", value=0, format="%d") 
            AKI_Grade=selectbox("AKI Grade", ["Stage 0", "Stage 1", "Stage 2", "Stage 3"])
            Gender=selectbox("Gender", ["Female", "Male"])
            Transfusion = st.selectbox("Transfusion", ["No", "Yes"])
            UA = st.number_input("Uric acid (μmol/L)", value=0.00, format="%.2f") 
            ADA = st.number_input("ADA (U/L)", value=0.00, format="%.2f") 
            TP=st.number_input("Total protein (g/L)", value=0.00, format="%.2f") 
            EOs=st.number_input("Eosinophils (×10^9/L)", value=0.00, format="%.2f") 
         
            PPI_encoded = PPI_mapping[PPI]
            AKI_Grade_encoded = AKI_Grade_mapping[AKI_Grade]
            Gender_encoded = Gender_mapping[Gender]
            Transfusion_encoded = Transfusion_mapping[Transfusion]

            features.extend([PPI_encoded, Glu, Hb, AKI_Grade_encoded,Gender_encoded,Transfusion_encoded, UA, ADA, TP,EOS])

        # Create a button to make predictions
        if st.button('Predict'):
            features_array = np.array(features).reshape(1, -1)

            if prediction_type == "AKI Prediction":
                aki_probability = predict_aki_probability(features_array)
                st.write(f'AKI Probability: {aki_probability:.2f}')
            else:
                akd_probability = predict_akd_probability(features_array)
                st.write(f'AKD Probability: {akd_probability:.2f}')

if __name__ == '__main__':
    main()
